// Naive implementation of Knight's Tour.
//
// source cell:  s  (myself)
// destination:  d  (neighbor)
//
//          tl     tr
//
//          [d][ ][d]
//  lt   [d]   [ ]   [d]   rt
//       [ ][ ][s][ ][ ]
//  lb   [d]   [ ]   [d]   rb
//          [d][ ][d]
//
//          bl     br
//
float4 main(
  uniform samplerRECT aBoard,
  float2 iPos: WPOS
) : COLOR
{
  static const int WIDTH = 8;

  float4 self = texRECT(aBoard, iPos);
  int rank = 0;

  // iterate through valid neighboring cells
    float2 itr = float2(1, 2);

    for (int k = 0; k < 2; k++) {
      for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
          // relative offset of neighboring cell
          float2 offset = itr * float2(pow(-1, fixed(i)), pow(-1, fixed(j)));

          // position of neighboring cell
          float2 pos = iPos + offset;

          // ignore out-of-bounds indices because texRECT() will clamp them to the border of the grid
          if (
            pos.x >= 0 && pos.x < WIDTH &&
            pos.y >= 0 && pos.y < WIDTH
          ){
            float4 cell = texRECT(aBoard, pos);

            // calculate Warnsdorff ranking
              if (cell.r == 0)
                rank++;
          }
        }
      }

    // swap 1, 2 => 2, 1 to handle both cases: top & bottom, left & right
    itr.xy = itr.yx;
  }

  self.g = rank;
  self.b = rank / 8.0;
  return self;
}
